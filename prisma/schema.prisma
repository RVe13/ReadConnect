datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  communities Community[]
  members Member[]
  channels Channel[]
}


model Community{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  channels Channel[]

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  messages Message[]
  
  communityId String 
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
  
}

enum ChannelType{
  VOICE
  VIDEO 
  TEXT
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String 
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  messages Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([profileId])

}

model Message{
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}
